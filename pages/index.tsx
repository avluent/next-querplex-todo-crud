import React, { useEffect, useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import AddTodoForm from '../components/AddTodoForm'
import TodoList from '../components/TodoList'
import Todo from '../components/Todo'
import { TodoItem } from '../types/interfaces'
import axios from 'axios'
import { uuid } from 'uuidv4'
import Filter from '../components/Filter'

const Home: NextPage = () => {

  const [ todoItemList, setTodoItemList ] = useState<TodoItem[]>([])
  const [ currentFilter, setCurrentFilter ] = useState<string>("")

  // make single call to api to fetch todos
  useEffect(() => {

    axios.get('/api/todos', {
      auth: {
        username: 'querplex',
        password: 'Passwort'
      }
    }).then(res => {
      setTodoItemList(res.data)
    }).catch(err => {
      console.error(err)
    })

  },[])

  // Todo handling functions
  const addTodoItem = (description: string) => {

    if (description === "") return

    let newItem = {
      id: uuid(),
      description: description,
      isDone: false
    }

    // console.log("added", newItem)
    setTodoItemList([...todoItemList, newItem])
  }

  const filterTodoItems = (todoItems: TodoItem[], filterType: string): TodoItem[] => {
    switch(filterType) {
      case "open": {
        return sortTodoItems(
          todoItems.filter(todo => !todo.isDone)
        )
      }
      case "done": {
        return sortTodoItems(
          todoItems.filter(todo => todo.isDone)
        )
      }
      default: {
        return sortTodoItems(todoItems)
      }
    }
  }

  const sortTodoItems = (todoItems: TodoItem[]): TodoItem[] => {

    return todoItems.sort((a, b) => {
      let descriptionOfItemA = a.description
      let descriptionOfItemB = b.description
      return (descriptionOfItemA < descriptionOfItemB) 
        ? -1 
        : (descriptionOfItemA > descriptionOfItemB) 
          ? 1 
          : 0
    })

  }

  const editTodoItemDescription = (id: string, description: string) => {

    let todoItem = todoItemList.find(todo => todo.id === id)

    if (todoItem) {

      let newTodoItem: TodoItem = {
        id: todoItem.id,
        description: description,
        isDone: todoItem.isDone
      }

      let filteredTodoItemList = todoItemList.filter(todo => todo.id !== id)
      let newTodoItemList = [...filteredTodoItemList, newTodoItem]

      setTodoItemList(newTodoItemList)
    }

  }

  const toggleTodoItemDone = (id: string) => {

    console.log('toggleDone', id)
    let todoItem = todoItemList.find(todo => todo.id === id)

    if (todoItem) {

      let newTodoItem: TodoItem = {
        id: todoItem.id,
        description: todoItem.description,
        isDone: !todoItem.isDone
      }

      let filteredTodoItemList = todoItemList.filter(todo => todo.id !== id)
      let newTodoItemList = [...filteredTodoItemList, newTodoItem]

      setTodoItemList(newTodoItemList)
    }

  }

  const removeTodoItem = (id: string) => {
    let newTodoArray = todoItemList.filter(todo => todo.id !== id)
    setTodoItemList(newTodoArray)
  }

  const setFilter = (filter: string) => {
    setCurrentFilter(filter)
  }

  useEffect(() => {
    console.log(currentFilter)
  }, [currentFilter])


  return (
    <div className={`container`}>

      <Head>
        <title>Querplex Todo CRUD Assignment</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={`main`}>

        <h1 className={`title`}>
          Todo List
        </h1>

        <AddTodoForm addTodoItem={addTodoItem} />

        <Filter
          currentFilter={currentFilter}
          setFilter={setFilter}
        />

        {filterTodoItems(todoItemList, currentFilter).length > 0 &&
          <TodoList>

            {filterTodoItems(todoItemList, currentFilter).map((todo: TodoItem, index: number) => {
              return (
                <Todo 
                  key={index}
                  id={todo.id}
                  description={todo.description}
                  isDone={todo.isDone}
                  editTodoItemDescription={editTodoItemDescription}
                  toggleTodoItemDone={toggleTodoItemDone}
                  removeTodoItem={removeTodoItem}
                />
              )
            })}

          </TodoList>
        }

      </main>

      <footer className={`footer`}>
      </footer>
    </div>
  )
}

export default Home
